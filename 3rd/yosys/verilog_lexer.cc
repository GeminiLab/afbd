#line 2 "frontends/verilog/verilog_lexer.cc"

#line 4 "frontends/verilog/verilog_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer frontend_verilog_yy_create_buffer
#define yy_delete_buffer frontend_verilog_yy_delete_buffer
#define yy_flex_debug frontend_verilog_yy_flex_debug
#define yy_init_buffer frontend_verilog_yy_init_buffer
#define yy_flush_buffer frontend_verilog_yy_flush_buffer
#define yy_load_buffer_state frontend_verilog_yy_load_buffer_state
#define yy_switch_to_buffer frontend_verilog_yy_switch_to_buffer
#define yyin frontend_verilog_yyin
#define yyleng frontend_verilog_yyleng
#define yylex frontend_verilog_yylex
#define yylineno frontend_verilog_yylineno
#define yyout frontend_verilog_yyout
#define yyrestart frontend_verilog_yyrestart
#define yytext frontend_verilog_yytext
#define yywrap frontend_verilog_yywrap
#define yyalloc frontend_verilog_yyalloc
#define yyrealloc frontend_verilog_yyrealloc
#define yyfree frontend_verilog_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE frontend_verilog_yyrestart(frontend_verilog_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int frontend_verilog_yyleng;

extern FILE *frontend_verilog_yyin, *frontend_verilog_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE frontend_verilog_yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-frontend_verilog_yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < frontend_verilog_yyleng; ++yyl )\
                    if ( frontend_verilog_yytext[yyl] == '\n' )\
                        --frontend_verilog_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up frontend_verilog_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via frontend_verilog_yyrestart()), so that the user can continue scanning by
	 * just pointing frontend_verilog_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when frontend_verilog_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int frontend_verilog_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow frontend_verilog_yywrap()'s to do buffer switches
 * instead of setting up a fresh frontend_verilog_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void frontend_verilog_yyrestart (FILE *input_file  );
void frontend_verilog_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE frontend_verilog_yy_create_buffer (FILE *file,int size  );
void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void frontend_verilog_yypop_buffer_state (void );

static void frontend_verilog_yyensure_buffer_stack (void );
static void frontend_verilog_yy_load_buffer_state (void );
static void frontend_verilog_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER frontend_verilog_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE frontend_verilog_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes (yyconst char *bytes,int len  );

void *frontend_verilog_yyalloc (yy_size_t  );
void *frontend_verilog_yyrealloc (void *,yy_size_t  );
void frontend_verilog_yyfree (void *  );

#define yy_new_buffer frontend_verilog_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define frontend_verilog_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *frontend_verilog_yyin = (FILE *) 0, *frontend_verilog_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int frontend_verilog_yylineno;

int frontend_verilog_yylineno = 1;

extern char *frontend_verilog_yytext;
#define yytext_ptr frontend_verilog_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up frontend_verilog_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	frontend_verilog_yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1883] =
    {   0,
      156,  154,  155,  151,  154,  155,  151,  155,  151,  154,
      155,  154,  155,   89,  154,  155,  101,  102,  154,  155,
    16440,  154,  155,  154,  155,  154,  155,  154,  155,  154,
      155,  154,  155,  154,  155,  154,  155,   85,  154,  155,
      154,  155,  154,  155,  154,  155,  154,  155,  101,  102,
      154,  155,16440,  154,  155,  154,  155,  154,  155,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,

      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  101,
      102,  154,  155,16440,  101,  102,  154,  155,16440,  154,
      155,  154,  155,  154,  155,  148,  155,  149,  155,  148,
      155,   92,  155,  155,   91,   92,  155,   92,  155,  104,
      155,  105,  155,  104,  155,  104,  155,  110,  155,  110,
      155,  110,  155,  110,  155,  116,  155,  114,  116,  155,

      114,  155,  113,  116,  155,  115,  116,  155,  126,  101,
      102,16440,  102,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  124,
       86,   86,  118,  119,  122,  145,  121,  140,  142,  141,
      143,  144,  147,  153,   85,   85,  139,  135,  127,  125,
      128,  136,  117,  152,  134,   11,   11,   11,   11,   11,
       11,   11,   11,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,

    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,   34,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,   39,   93,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,

      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  120,  123,  131,
      133,  132,  150,   90,  111,  113,  130,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  146,  153,   87,   88,  137,  129,

      138,   11,   11,   11,   11,   11,   11,   11,   11,  101,
      102,16440,   93,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,   69,  101,  102,16440,   93,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   33,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,   36,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,

    16440,  101,  102,16440,   93,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,   78,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,   68,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,   76,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,

    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,   87,   11,   11,   11,
       11,   11,   11,   11,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,   40,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,   35,  101,  102,16440,  101,  102,

    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,   83,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,   62,  101,  102,16440,   82,  101,  102,16440,

      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   16,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   77,  101,
      102,16440,  101,  102,16440,   75,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,   97,  101,  102,
    16440,   98,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,   96,  101,  102,16440,
      101,  102,16440,   96,  101,  102,16440,  101,  102,16440,

      101,  102,16440,  101,  102,16440,   87,   11,   11,   11,
       11,   11,   11,   11,   11,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
       32,  101,  102,16440,  101,  102,16440,   41,  101,  102,
    16440,   42,  101,  102,16440,  101,  102,16440,   63,  101,
      102,16440,   59,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,   66,  101,  102,16440,  101,  102,16440,  101,

      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   74,  101,  102,16440,   72,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   67,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,   47,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,

      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,   97,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   11,   11,
       11,   11,   11,   11,   11,   30,  101,  102,16440,   57,
      101,  102,16440,   29,  101,  102,16440,   58,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,

    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,   81,
      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   12,  101,  102,16440,  101,  102,16440,   73,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,   48,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,   80,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,   50,  101,  102,16440,  101,  102,16440,

      101,  102,16440,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
       99,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,   11,   11,   11,   11,   11,   11,   11,
       11,  101,  102,16440,  101,  102,16440,   64,  101,  102,
    16440,   44,  101,  102,16440,  101,  102,16440,   43,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,   17,  101,  102,16440,  101,  102,16440,

      101,  102,16440,  101,  102,16440,   31,  101,  102,16440,
       79,  101,  102,16440,  101,  102,16440,  101,  102,16440,
       25,  101,  102,16440,   38,  101,  102,16440,   21,  101,
      102,16440,  101,  102,16440,   37,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   18,  101,  102,16440,  101,  102,16440,   94,  101,
      102,16440,   95,  101,  102,16440,   84,  101,  102,16440,
       51,  101,  102,16440, 8248,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,   11,

       11,   11,   11,   11,   11,   11,    9,   11,   11,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   28,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,  101,  102,16440,   14,
      101,  102,16440,   45,  101,  102,16440,  101,  102,16440,
      101,  102,16440,  101,  102,16440,   52,  101,  102,16440,
       61,  101,  102,16440,   60,  101,  102,16440,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,  100,  101,  102,
    16440,   11,   11,   11,   11,   11,   11,   11,    9,    9,

       11,   11,  101,  102,16440,   54,  101,  102,16440,  101,
      102,16440,   49,  101,  102,16440,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   13,  101,
      102,16440,  101,  102,16440,  101,  102,16440,  101,  102,
    16440,   23,  101,  102,16440,  101,  102,16440,   26,  101,
      102,16440,  101,  102,16440,   20,  101,  102,16440,  108,
       11,   11,   11,   11,   11,    2,   11,   11,   11,  101,
      102,16440,  101,  102,16440,   65,  101,  102,16440,  101,
      102,16440,  101,  102,16440,  101,  102,16440,   22,  101,
      102,16440,   19,  101,  102,16440,   70,  101,  102,16440,

       27,  101,  102,16440,  101,  102,16440,  107,    6,   11,
       11,   11,   10,   11,   11,    1,   53,  101,  102,16440,
      101,  102,16440,   15,  101,  102,16440,   46,  101,  102,
    16440,  101,  102,16440,  101,  102,16440,    6,    6,   11,
       11,   11,   10,   10,   11,   11,    1,    3,   55,  101,
      102,16440,   24,  101,  102,16440,   71,  101,  102,16440,
       11,   11,   11,    5,  109,   11,    7,   11,   11,    5,
        5,   11,    7,    7,   11,    4,   11,    4,    8,  112,
      106,  103
    } ;

static yyconst flex_int16_t yy_accept[872] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   12,   14,   17,
       22,   24,   26,   28,   30,   32,   34,   36,   38,   41,
       43,   45,   47,   49,   54,   56,   58,   60,   65,   70,
       75,   80,   85,   90,   95,  100,  105,  110,  115,  120,
      125,  130,  135,  140,  145,  150,  155,  160,  162,  164,
      166,  168,  170,  172,  174,  175,  178,  180,  182,  184,
      186,  188,  190,  192,  194,  196,  198,  201,  203,  206,
      209,  209,  209,  210,  210,  213,  214,  214,  217,  220,
      223,  226,  229,  232,  235,  238,  241,  244,  247,  250,

      251,  251,  252,  253,  253,  253,  254,  255,  256,  257,
      258,  258,  259,  260,  261,  262,  263,  264,  265,  265,
      266,  266,  267,  268,  269,  270,  271,  272,  273,  274,
      275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      287,  290,  293,  296,  299,  302,  305,  308,  311,  314,
      317,  320,  323,  326,  329,  332,  335,  338,  342,  345,
      348,  351,  354,  357,  360,  363,  368,  371,  374,  377,
      380,  383,  386,  389,  392,  395,  398,  401,  404,  407,
      410,  413,  416,  419,  422,  425,  428,  429,  430,  431,
      432,  433,  434,  435,  435,  435,  435,  436,  436,  436,

      437,  438,  438,  438,  438,  438,  441,  444,  447,  450,
      453,  456,  459,  462,  465,  468,  471,  474,  477,  480,
      483,  486,  489,  492,  495,  496,  496,  496,  497,  498,
      498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
      508,  509,  510,  513,  517,  520,  523,  526,  530,  534,
      537,  540,  543,  546,  549,  552,  556,  559,  562,  565,
      569,  572,  575,  578,  581,  584,  587,  590,  593,  596,
      599,  602,  605,  609,  612,  615,  618,  621,  624,  627,
      630,  633,  637,  640,  643,  646,  649,  652,  655,  658,
      661,  664,  668,  671,  674,  677,  681,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  687,  690,  693,
      696,  699,  702,  705,  708,  711,  714,  717,  720,  723,
      726,  729,  732,  735,  738,  741,  744,  747,  747,  748,
      748,  749,  750,  751,  752,  753,  754,  755,  758,  761,
      764,  767,  770,  773,  776,  780,  783,  786,  789,  792,
      795,  799,  802,  805,  808,  811,  814,  817,  820,  823,
      827,  830,  833,  836,  839,  842,  845,  848,  851,  854,
      857,  860,  863,  866,  869,  872,  875,  878,  881,  884,
      887,  890,  893,  897,  901,  904,  907,  910,  913,  916,
      919,  923,  926,  929,  933,  936,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  943,  946,  949,  952,  955,
      958,  962,  966,  969,  972,  975,  978,  981,  984,  987,
      991,  994,  998, 1001, 1004, 1007, 1007, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1022, 1025,
     1028, 1031, 1035, 1038, 1042, 1046, 1049, 1053, 1057, 1060,
     1063, 1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090,
     1093, 1097, 1100, 1103, 1106, 1109, 1112, 1116, 1120, 1123,
     1126, 1129, 1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154,
     1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184,
     1187, 1190, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218,
     1221, 1224, 1227, 1230, 1234, 1237, 1240, 1243, 1246, 1249,
     1249, 1249, 1250, 1251, 1252, 1253, 1254, 1254, 1255, 1256,
     1260, 1264, 1268, 1272, 1275, 1278, 1281, 1284, 1287, 1290,
     1293, 1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320,
     1324, 1327, 1330, 1333, 1336, 1339, 1342, 1346, 1349, 1353,
     1356, 1359, 1362, 1365, 1368, 1372, 1375, 1378, 1382, 1385,
     1388, 1391, 1394, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419,
     1422, 1425, 1428, 1431, 1435, 1438, 1441, 1444, 1444, 1444,

     1445, 1446, 1447, 1448, 1449, 1450, 1450, 1451, 1452, 1455,
     1458, 1462, 1466, 1469, 1473, 1476, 1479, 1482, 1485, 1488,
     1491, 1494, 1498, 1501, 1504, 1507, 1507, 1511, 1515, 1518,
     1521, 1525, 1529, 1533, 1536, 1540, 1543, 1546, 1549, 1552,
     1556, 1559, 1563, 1567, 1571, 1575, 1575, 1575, 1575, 1575,
     1575, 1576, 1576, 1579, 1582, 1585, 1588, 1591, 1594, 1597,
     1600, 1600, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
     1607, 1609, 1610, 1613, 1616, 1619, 1622, 1626, 1629, 1632,
     1635, 1638, 1641, 1644, 1647, 1650, 1654, 1658, 1658, 1661,
     1664, 1667, 1671, 1675, 1679, 1682, 1685, 1685, 1685, 1685,

     1685, 1685, 1685, 1685, 1688, 1692, 1692, 1692, 1693, 1694,
     1695, 1696, 1697, 1698, 1699, 1699, 1700, 1702, 1703, 1706,
     1710, 1713, 1717, 1720, 1723, 1726, 1729, 1733, 1736, 1739,
     1742, 1742, 1746, 1749, 1753, 1756, 1760, 1760, 1760, 1760,
     1760, 1761, 1761, 1761, 1761, 1762, 1763, 1764, 1765, 1766,
     1766, 1767, 1768, 1769, 1769, 1770, 1773, 1776, 1780, 1783,
     1786, 1789, 1793, 1797, 1801, 1801, 1805, 1808, 1808, 1808,
     1808, 1808, 1809, 1809, 1811, 1812, 1813, 1815, 1816, 1817,
     1817, 1817, 1821, 1824, 1828, 1832, 1835, 1835, 1838, 1838,
     1838, 1838, 1838, 1839, 1841, 1842, 1843, 1844, 1846, 1847,

     1848, 1848, 1849, 1849, 1849, 1849, 1853, 1857, 1857, 1857,
     1861, 1861, 1861, 1861, 1862, 1863, 1864, 1864, 1865, 1865,
     1865, 1865, 1866, 1866, 1867, 1869, 1870, 1871, 1872, 1872,
     1872, 1872, 1873, 1874, 1876, 1877, 1877, 1877, 1877, 1878,
     1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1880, 1880,
     1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,
     1880, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1882, 1883,
     1883
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    1,    9,   10,   11,
       12,   13,   14,    1,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   27,
       32,   33,   34,   32,   32,   32,   32,   32,   33,   35,
       32,   32,   36,   32,   32,   32,   32,   27,   32,   27,
        1,   37,    1,   38,   39,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   32,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    1,    1,
        1,    1,    1,    1,    1,    7,    8,    9,    9,    9,
       10,    1,    1,    1,    1,    1,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1,    6,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[898] =
    {   0,
        0,    0,   67,   68,   69,   70,   71,   72,   79,   80,
      135,    0, 1608, 3964,   85, 3964, 3964, 1574, 3964,  203,
     1587,  264, 1582,  202,   84,   89, 1566,   83,  314, 1546,
       55,   60,   90,  207,  113, 1475,  186,  333,  227,  307,
      228,   69,  315,  325,  336,  182,  344,  358,  357,  372,
      383,  382,  397,  321,  398,  411,  419, 1526, 1468,  208,
     3964, 3964, 1515, 3964, 3964, 3964,    0, 3964, 3964, 1517,
       40, 3964, 1511, 1466, 1484, 3964, 3964, 3964,    0, 3964,
      211,    0, 1500,  442,  423,    0,  482,  439,  438,  452,
      453,  464,  475,  483,  487,  499,  502,  503,  523, 1512,

      542,  337,    0,    0,   63, 3964, 3964, 3964, 3964, 3964,
     1491, 3964, 3964, 3964, 3964, 3964,  294,    0,  113,  583,
      590,  599, 3964, 1492, 3964, 1482, 3964, 1479,  115, 3964,
     3964,    0, 1452, 1442, 1419, 1412, 1404, 1395, 1397,  573,
      581,  589,  592,  606,  603,  614,  617,  628,  629,  625,
      640,  648,  651,  652,  662,  663,  673,  674,  684,  692,
      706,  710,  707,  722,  726,  736,  739,  750,  751,  763,
      762,  777,  780,  792,  791,  802,  803,  813,  816,  824,
      827,  837,  841,  849,  857,  861, 3964, 3964, 3964, 3964,
     3964, 3964, 3964,  299, 1395, 1392, 3964, 1388, 1378,    0,

     3964,  920, 1371, 1374, 1377,  875,  878,  886,  889,  899,
      900,  911,  921,  915,  927,  939,  935,  949,  953,  961,
      971,  950,  975,  985, 3964,  342, 1356,    0, 1021,  548,
     1028, 3964, 3964, 3964,    0, 1367, 1371, 1359, 1344, 1336,
     1333, 1328, 1003, 1004, 1020, 1021, 1033, 1032, 1045, 1044,
     1056, 1055, 1066, 1077, 1076, 1095, 1105, 1108, 1111, 1119,
     1130, 1131, 1142, 1127, 1146, 1150, 1160, 1166, 1163, 1174,
     1184, 1185, 1197, 1196, 1208, 1211, 1222, 1223, 1233, 1234,
     1212, 1244, 1245, 1248, 1258, 1262, 1274, 1273, 1285, 1295,
     1291, 1299, 1310, 1307, 1311, 1321, 1325,  417, 1313, 1324,

     1320, 1315, 1300, 1281, 1276, 1272, 1333, 1339, 1347, 1355,
     1361, 1351, 1372, 1373, 1385, 1389, 1397, 1405, 1409, 1413,
     1417, 1423, 1431, 1435, 1441, 1445, 1449, 1276, 1492, 1499,
     1272, 1280,  179, 1269, 1267, 1251, 1255, 1469, 1483, 1495,
     1498, 1508, 1494, 1511, 1512, 1523, 1527, 1531, 1539, 1552,
     1549, 1553, 1563, 1573, 1569, 1581, 1587, 1591, 1602, 1599,
     1605, 1615, 1618, 1628, 1629, 1639, 1642, 1650, 1653, 1667,
     1668, 1679, 1680, 1690, 1691, 1701, 1702, 1705, 1715, 1725,
     1729, 1719, 1737, 1740, 1743, 1751, 1754, 1765, 1764, 1775,
     1776, 1786, 1787, 1790, 1804, 1800, 1236, 1234, 1208, 1194,

     1180,   49, 1177, 1156, 1801, 1822, 1814, 1826, 1834, 1837,
     1838, 1848, 1851, 1862, 1863, 1874, 1875, 1886, 1897, 1887,
     1901, 1898, 1913, 1914, 1917,   69, 1031, 1221, 1165, 1138,
     1149, 1118, 1135,  248, 1122, 1102, 1925, 1928, 1931, 1945,
     1951, 1948, 1975, 1959, 1962, 1976, 1965, 1979, 1987, 1991,
     1999, 2009, 2005, 2013, 2017, 2028, 2031, 2042, 2032, 2043,
     2046, 2056, 2057, 2067, 2070, 2081, 2080, 2084, 2098, 2099,
     2109, 2095, 2115, 2125, 2133, 2163, 2136, 2150, 2147, 2162,
     2175, 2174, 2185, 2188, 2189, 2206, 2205, 2219, 2216, 2230,
     2233, 2234,  166, 1110,  252, 1102, 1088, 1055, 1058, 1044,

     1043, 2248, 2244, 2247, 2263, 2262, 2276, 2275, 2286, 2259,
     2296, 2299, 2302, 2310, 2320, 2321, 2332, 2333, 2336, 1033,
     1039, 1032, 1025, 1017, 1005,   48,  269, 1015, 1010, 2349,
     2346, 2350, 2360, 2363, 2373, 2376, 2387, 2397, 2398, 2401,
     2415, 2418, 2414, 2429, 2440, 2444, 2455, 2456, 2466, 2469,
     2528, 2483, 2494, 2497, 2505, 2508, 2511, 2525, 2521, 2535,
     2531, 2547, 2543, 2553, 2557, 2571, 2567, 2570, 2581, 2589,
     2617, 2597, 2601,  987,  989,  975,  986,  980,  961,  972,
        0,  967, 2600, 2614, 2618, 2633, 2630, 2644, 2641, 2656,
     2655, 2666, 2667, 2677, 2678, 2688, 2696,  947,  944,  938,

      924,  925,  906,  902,  184,  309,  896,  913, 2699, 2702,
     2710, 2713, 2723, 2726, 2737, 2740, 2750, 2758, 2761, 2772,
     2771, 2775, 2783, 2786, 2797, 2849, 2787, 2807, 2818, 2815,
     2826, 2829, 2830, 2840, 2841, 2844, 2852, 2860, 2864, 2870,
     2884, 2876, 2880, 2888, 2892,  887,  896,  204,  876,  881,
     3964,  884, 2902, 2898, 2906, 2916, 2919, 2920, 2931, 2937,
      856,  858,  864,  866,  859,  846,  830,  828,  821,  318,
     2997,  821, 3016, 3022, 2934, 3028, 3032, 3042, 3045, 3048,
     3058, 3062, 3070, 3073, 3074, 3084, 3085,  840, 3095, 3098,
     3106, 3109, 3117, 3120, 3131, 3134,  795,  800,  793,  789,

      801,  802,  775, 3130, 3142,  771,  778,  773,  766,  761,
      762,  754, 3202,  747,    0,    0,    0,  746, 3221, 3224,
     3227, 3237, 3241, 3249, 3253, 3264, 3263, 3274, 3275, 3278,
      753, 3290, 3293, 3296, 3304, 3307,  723,  729,  773,  726,
     3964,  729,  514,  713,  717,  711,  709,  689,  676,  726,
     3964,    0,  723,  711,  326, 3310, 3323, 3320, 3324, 3334,
     3345, 3342, 3346, 3356,  683, 3357, 3360,  577,  649,  690,
      643,  587,  612, 3420,  578,  578, 3489,  561,    0,  310,
      341, 3508, 3512, 3511, 3522, 3532,  211, 3533,  589,  555,
      553,  566,    0,    0,  547,  544,    0,    0,  524,    0,

      475, 3964,  568,  733,  375, 3536, 3547, 2250,  540, 3548,
      524,  501,  478,  456,  469,  465,  525,  516, 3607,  501,
      449, 3964,  442,  439, 3653,  463,  593,  611,  407,  408,
      403,  408,    0,    0,    0,  374,  369,  366,  618,    0,
      363,  364,  342,  653,  331,  312,  318,  692,  313,  311,
      312,  296,  287,  267,  249,  244,  243, 3194,  224,  213,
     3611,  891, 1118, 1120,  226, 1138,  222, 3964, 3964, 3964,
     3722, 3732, 3742, 3752, 3761, 3771,  118, 3781, 3786, 3790,
     3799, 3804, 3813, 3823, 3833, 3843, 3853, 3863, 3873, 3883,
     3893, 3903, 3913, 3923, 3933, 3943, 3953

    } ;

static yyconst flex_int16_t yy_def[898] =
    {   0,
      870,    1,  871,  871,  872,  872,  873,  873,  874,  874,
      870,   11,  870,  870,  870,  870,  870,  870,  870,  875,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  875,  876,  870,  877,  875,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  878,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  879,  870,
      870,   22,  870,  870,   38,  880,  870,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  870,

       22,  101,  101,  101,   22,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  881,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  876,  870,
      870,  882,  882,  882,  882,  882,  882,  882,  882,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  879,

      870,  870,  870,  870,  870,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  870,  870,  870,  881,  870,  870,
      870,  870,  870,  870,  882,  882,  882,  882,  882,  882,
      882,  882,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  870,  870,  870,

      870,  870,  870,  870,  870,  870,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  870,  870,  870,
      882,  882,  882,  882,  882,  882,  882,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  870,  870,  870,  870,

      870,  870,  870,  870,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  870,  870,  870,  882,  882,
      882,  882,  882,  882,  882,  882,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,  870,  870,  870,  870,  870,  870,  870,  870,

      870,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  870,
      870,  882,  882,  882,  882,  882,  883,  882,  882,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      875,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  870,  870,  870,  870,  870,  870,  870,
      884,  870,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  870,  870,  882,

      882,  882,  882,  882,  882,  883,  882,  882,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  870,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  870,  870,  870,  870,  870,
      870,  870,   38,   38,   38,   38,   38,   38,   38,   38,
      870,  870,  882,  882,  882,  882,  882,  882,  882,  870,
      870,  882,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  870,   38,   38,
       38,   38,   38,   38,   38,   38,  870,  870,  870,  870,

      870,  870,  870,   38,   38,  870,  870,  882,  882,  882,
      882,  882,  870,  882,  885,  886,  671,  882,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      870,   38,   38,   38,   38,   38,  870,  870,  887,  870,
      870,  870,  870,  870,  882,  882,  882,  882,  882,  887,
      870,  713,  882,  885,  882,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  870,   38,   38,  870,  870,  870,
      870,  870,  870,  870,  882,  882,  870,  882,  888,  889,
      890,   38,   38,   38,   38,   38,  870,   38,  870,  870,
      870,  870,  891,  774,  882,  882,  892,  777,  882,  888,

      889,  870,  893,  889,  890,   38,   38,  870,  870,   38,
      870,  870,  870,  882,  882,  882,  870,  894,  870,  870,
      870,  870,  870,  882,  870,  882,  894,  894,  870,  870,
      870,  882,  895,  825,  896,  870,  870,  870,  882,  896,
      870,  870,  870,  897,  870,  870,  870,  897,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,    0,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870

    } ;

static yyconst flex_int16_t yy_nxt[4034] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   20,   21,   22,
       23,   14,   24,   25,   26,   27,   28,   29,   29,   29,
       30,   14,   31,   32,   33,   14,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   36,   34,   37,
       38,   39,   40,   41,   42,   43,   44,   34,   45,   34,
       46,   47,   48,   49,   50,   34,   51,   52,   53,   54,
       55,   56,   57,   34,   34,   58,   59,   14,   60,   62,
       62,   65,   65,   69,   69,   66,   66,  124,  125,   63,
       63,   65,   65,  126,  109,  195,   81,   70,   70,   81,
      196,   73,   73,  498,   82,  117,  111,  112,  870,  118,

      604,  111,  605,  114,  113,   67,   67,  111,  499,  115,
       71,   71,  111,  127,  128,  130,  130,  870,  870,  151,
      870,  152,  520,  132,   74,   74,   85,  521,   85,  153,
      229,  229,  229,   75,   75,   76,   77,   78,   77,   77,
       76,   76,   79,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   80,   76,   76,   76,
       76,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   76,   76,   79,   76,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       76,   76,   76,   76,   84,   84,   84,   84,   84,   84,
       84,   84,   81,  107,  108,   81,  189,  808,   86,  574,
       82,  431,   86,   87,  575,  809,  109,   87,  133,  134,
      135,  136,   85,  432,   85,  161,  137,  668,  869,   85,
      138,   85,  868,  669,  139,  190,   88,   89,   90,  527,
       91,   92,  527,  527,   93,   94,  527,  699,  863,   95,
       96,   97,   98,  700,   99,  101,  101,  101,  101,  110,
      527,  144,  150,  527,  191,  145,  862,   85,   85,   85,
       85,  102,  102,  102,   85,   85,  146,   85,  860,  102,
      102,  103,  102,  103,  102,  226,  104,  859,  226,  105,

      298,  858,  102,  298,  102,  103,  102,  103,  102,  102,
      670,  104,  802,  670,  803,   81,  804,  104,   81,  670,
      857,  105,  670,   82,  715,  856,  102,  781,  102,  119,
      781,  120,  120,  120,   84,   84,   84,   84,  870,  870,
      870,  870,  781,  226,  121,  781,  226,  147,   86,  855,
      854,  227,  122,   87,  148,  853,  299,   85,  121,   85,
      149,  852,  851,  154,   85,   85,   85,   85,  155,  157,
      850,   85,   85,  179,  156,   85,  817,   85,   85,  817,
       85,  158,   85,  140,   85,  141,   85,  159,  160,  849,
      142,  818,  143,   85,   85,   85,   85,  162,  163,  227,

      847,   85,  164,   85,  846,  845,  843,   85,   85,   85,
       85,  165,  168,  166,   85,   85,  167,   85,  298,  842,
      173,  298,   85,  171,   85,  169,  841,  172,  170,   85,
      174,   85,   85,   85,   85,   85,  175,  177,  180,   85,
       85,  176,   85,   84,   84,   84,   84,   85,   85,   85,
       85,  181,  839,  838,   85,   85,   85,   85,  182,  183,
      178,   85,   87,   85,  184,  837,  836,  835,   85,   85,
       85,  185,  186,   85,  299,   85,   85,  802,   85,  803,
       85,  804,   85,  202,  202,  202,  202,  206,   85,   85,
       85,   85,  209,  832,  208,   85,   85,   85,  207,  831,

      210,  830,   85,   85,   85,   85,  212,  808,  826,   85,
       85,  211,   85,  825,   85,  772,  213,  828,  772,  824,
      828,   85,  203,   85,  204,   85,  817,   85,  214,  817,
      823,  216,   85,   85,   85,   85,  215,   85,  205,   85,
       85,  818,   85,  217,   85,  822,   85,  218,  219,   85,
      221,   85,   85,   85,   85,  222,   85,  220,   85,   85,
       85,   85,   85,  223,  821,  231,  231,  231,  820,  102,
      802,  102,  773,   85,  870,   85,  816,  870,  789,  224,
       85,  789,   85,  102,   81,  102,  231,   81,  772,  870,
      789,  772,   82,  789,  870,  870,  815,  870,  119,  870,

      120,  120,  120,  230,  230,  814,  813,  231,  231,  231,
      812,  811,  828,  121,  119,  828,  122,  122,  122,  844,
      799,  122,  844,   85,  244,   85,  796,  121,  231,  121,
       85,   85,   85,   85,  243,  790,  795,  122,   85,   85,
       85,   85,   85,  121,   85,  773,  245,  790,   85,   85,
      246,   85,  247,   85,  844,   85,   85,  844,   85,  249,
       85,  248,   85,   85,   85,   85,   85,   85,  792,   85,
      254,   85,  251,   85,  250,   85,   85,   85,   85,   85,
       85,  252,   85,  791,   85,   85,   85,   85,   85,  253,
       85,  256,   85,  870,  779,  258,  870,  255,   85,   85,

       85,   85,   85,   85,  259,   85,  768,  257,   85,   85,
       85,   85,   85,   85,   85,  261,  787,  780,  260,   85,
       85,   85,   85,   85,   85,  262,   85,  779,  751,  778,
       85,   85,   85,   85,   85,  802,   85,  803,  263,  804,
      264,   85,   85,   85,   85,  265,  266,  777,  268,   85,
      267,   85,  269,  270,  776,  775,   85,   85,   85,  271,
       85,  774,   85,   85,   85,   85,   85,   85,  272,   85,
      743,  771,   85,  770,   85,  751,   85,  769,   85,   85,
      768,   85,  244,   85,  273,   85,   85,  765,   85,   85,
      755,   85,  275,   85,  753,   85,   85,  274,   85,  749,

       85,   85,   85,   85,  748,  747,  276,   85,  277,   85,
       85,  278,   85,   85,  280,   85,  279,  281,  746,   85,
       85,   85,   85,  282,  285,  745,  744,   85,  743,   85,
       85,  283,   85,  581,  284,  287,   85,   85,  286,   85,
      742,   85,   85,   85,   85,  741,  740,  739,   85,   85,
       85,   85,   85,   85,   85,   85,  288,  738,  737,   85,
      289,   85,   85,   85,  291,   85,   85,  290,   85,  731,
       85,  718,   85,   85,   85,   85,   85,   85,  714,  293,
      292,   85,  713,   85,   85,  294,   85,   85,  712,   85,
      711,   85,  864,   85,   85,  864,   85,  295,   85,   85,

       85,   85,  710,  865,  709,  296,   85,   85,   85,   85,
      297,   85,  708,   85,   85,  707,   85,  244,   85,  706,
       85,  202,  202,  202,  202,   85,  703,   85,   85,  308,
       85,  702,  307,  701,   85,   85,   85,   85,   85,   85,
      698,   85,  309,   85,  697,   85,   85,  310,   85,   85,
      312,  311,   85,  672,  671,  667,   85,   85,   85,   85,
      203,  313,  204,   85,  666,   85,  314,  315,   85,  316,
       85,   85,   85,   85,   85,  665,  205,   85,   85,   85,
       85,  317,  664,  663,   85,   85,   85,   85,  662,   85,
      318,   85,   85,  319,   85,  320,   85,  321,   85,   85,

       85,   85,   85,   85,  661,   85,   85,  325,   85,   85,
       85,   85,   85,   85,  322,  652,  581,  323,   85,  581,
       85,   85,  324,   85,  650,   85,  649,   85,   85,  648,
       85,  326,   85,  327,   85,   85,  647,   85,  329,  329,
      329,  646,   85,  338,   85,  231,  231,  231,  428,  428,
      428,  330,  608,   85,   85,   85,   85,  607,  603,  329,
       85,   85,   85,   85,  339,  330,  231,  602,  340,  428,
       85,   85,   85,   85,  342,  601,  600,   85,   85,  341,
       85,  343,   85,   85,   85,   85,  599,  598,  345,   85,
       85,   85,   85,  344,   85,   85,   85,   85,  346,  582,

      581,   85,   85,   85,   85,   85,   85,   85,   85,  580,
      348,  579,  347,   85,   85,   85,   85,  349,   85,  866,
      351,  864,  866,   85,  864,   85,   85,   85,   85,   85,
      867,  350,  865,   85,   85,   85,   85,  352,  578,  866,
      353,  354,  866,  355,  577,   85,  356,   85,  576,  357,
      867,  362,  358,  359,   85,   85,  360,   85,   85,  529,
      361,   85,   85,   85,   85,   85,  528,   85,   85,   85,
       85,   85,  363,  526,  525,  364,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  367,   85,   85,   85,   85,
       85,  365,   85,  524,   85,  366,   85,  523,   85,   85,

       85,   85,   85,   85,  370,  368,  371,   85,  522,  369,
       85,  372,   85,   85,  501,   85,   85,   85,   85,   85,
       85,  500,   85,   85,   85,   85,   85,  244,  373,  375,
      497,   85,  496,  374,   85,   85,   85,   85,  428,  428,
      428,   85,   85,   85,   85,  376,   85,   85,   85,   85,
      377,  379,  495,   85,   85,   85,   85,  378,   85,  428,
       85,   85,  384,   85,   85,   85,  380,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  381,  383,  494,   85,
       85,   85,   85,   85,   85,   85,   85,  382,  493,  385,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  436,

       85,   85,   85,   85,   85,   85,  386,   85,   85,  435,
       85,  434,   85,  433,  388,   85,  389,   85,  387,   85,
      430,   85,  429,   85,   85,   85,   85,  390,  426,  404,
       85,   85,   85,   85,  391,   85,  403,   85,  402,  392,
      401,   85,   85,   85,   85,   85,  393,   85,   85,   85,
       85,   85,   85,  394,   85,  396,   85,  395,   85,   85,
       85,   85,   85,   85,   85,  400,   85,   85,   85,   85,
       85,   85,  399,   85,  398,   85,  397,   85,   85,  337,
       85,  244,   85,   85,   85,   85,  336,  405,  335,   85,
       85,   85,   85,  406,  334,  408,   85,   85,   85,   85,

      407,  410,  333,   85,   85,   85,   85,   85,   85,  409,
       85,   85,   85,   85,   85,  411,  332,  331,   85,  328,
       85,  306,   85,   85,   85,   85,  412,  305,  304,   85,
       85,   85,   85,  413,  303,   85,  414,   85,  302,   85,
      301,   85,   85,  300,   85,  242,   85,   85,   85,   85,
      415,  241,  240,  416,   85,   85,   85,   85,  417,   85,
      239,   85,   85,   85,   85,  419,   85,   85,  418,   85,
       85,  238,   85,   85,   85,   85,   85,  420,  411,  422,
       85,   85,   85,   85,  421,   85,  237,   85,   85,  423,
       85,   85,   85,   85,   85,   85,  236,  424,   85,   85,

       85,   85,   85,  234,   85,  233,   85,  425,   85,  329,
      329,  329,  427,  427,  232,  109,  428,  428,  428,   85,
      225,   85,  330,  201,  199,  198,   85,  197,   85,  194,
      329,  192,  437,   85,  188,   85,  330,  428,  187,  438,
       85,  439,   85,  131,   85,   85,  442,   85,   85,  440,
       85,   85,   85,   85,   85,   85,  443,   85,   85,  441,
       85,   85,   85,   85,   85,   85,  123,   85,   85,   85,
       85,   85,  446,   85,  444,   85,  445,   85,  116,   85,
       85,   85,   85,   85,   85,  447,   85,  448,   85,   85,
       85,   85,  450,  451,  106,  100,   85,   83,  449,   85,

      452,   85,   85,   85,   85,   85,   85,  870,   85,   85,
       85,   85,   85,   85,  870,   85,  870,  454,  870,   85,
       85,  455,  453,   85,  870,   85,   85,  457,   85,  870,
       85,   85,   85,   85,  456,  870,  870,   85,   85,   85,
       85,   85,  459,   85,   85,  458,   85,  870,   85,   85,
       85,   85,   85,  870,   85,   85,   85,   85,   85,   85,
      870,   85,   85,  460,   85,  461,  870,   85,   85,  464,
       85,  870,   85,  870,   85,   85,  462,   85,   85,   85,
       85,   85,  870,  870,  463,   85,   85,   85,   85,   85,
      466,   85,   85,  870,   85,  465,   85,  870,   85,   85,

       85,   85,   85,   85,  870,   85,  870,   85,  467,   85,
       85,  468,   85,  469,  870,  870,  870,   85,  471,   85,
       85,  472,  870,  470,   85,   85,   85,   85,  870,   85,
       85,   85,   85,  473,  475,  870,   85,   85,   85,   85,
      474,   85,   85,   85,  870,  478,  476,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  870,   85,   85,   85,
       85,  477,   85,  482,   85,   85,  479,   85,  480,   85,
      870,   85,   85,  870,   85,   85,   85,   85,   85,   85,
      870,   85,   85,  483,   85,  481,   85,   85,   85,   85,
       85,  870,   85,   85,   85,   85,   85,   85,  485,   85,

       85,   85,   85,   85,   85,  870,   85,  484,   85,  486,
       85,   85,  487,   85,   85,   85,   85,   85,  488,  870,
      870,   85,   85,   85,   85,  489,   85,   85,   85,  490,
      870,  870,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  870,   85,   85,   85,   85,  491,   85,  492,   85,
       85,  502,   85,   85,   85,  870,   85,   85,   85,   85,
       85,   85,  503,   85,   85,  870,   85,  504,  870,  870,
      412,   85,   85,   85,   85,  505,  412,  870,   85,   85,
      870,   85,  506,   85,   85,   85,   85,   85,   85,   85,
       85,  507,  870,   85,  508,   85,   85,   85,   85,  870,

       85,   85,  510,   85,  870,   85,  870,   85,   85,  509,
       85,  870,   85,   85,   85,   85,  870,  870,  512,   85,
       85,   85,   85,  511,   85,   85,   85,   85,  870,  870,
      870,   85,   85,   85,   85,  513,   85,   85,   85,   85,
      514,  515,  516,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  870,   85,   85,  517,   85,   85,   85,  518,
       85,  420,  519,   85,   85,   85,   85,   85,  870,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  870,
       85,   85,  530,  532,   85,   85,  531,   85,   85,  533,
       85,  534,  244,  244,  870,   85,  870,   85,   85,  870,

       85,   85,   85,   85,   85,   85,  870,   85,   85,   85,
       85,   85,   85,  870,   85,   85,   85,   85,   85,   85,
      535,   85,   85,  870,   85,   85,   85,   85,   85,   85,
      870,   85,   85,   85,   85,   85,   85,  536,   85,   85,
      870,   85,  870,   85,   85,  870,   85,  537,   85,   85,
       85,   85,  870,  539,  870,   85,  538,  540,   85,   85,
      870,   85,   85,   85,   85,  541,   85,   85,   85,   85,
       85,  543,   85,  544,   85,  542,   85,  870,   85,  870,
       85,   85,   85,   85,   85,   85,  545,   85,   85,  546,
       85,   85,   85,   85,   85,   85,   85,  549,   85,   85,

       85,   85,  547,   85,  548,   85,   85,   85,   85,   85,
      870,  870,  870,   85,   85,   85,   85,   85,  870,   85,
       85,  552,   85,  550,   85,  870,   85,   85,  551,   85,
       85,   85,   85,   85,   85,  870,   85,   85,   85,   85,
       85,   85,  553,   85,  554,   85,  870,   85,   85,   85,
       85,   85,   85,  870,   85,   85,   85,   85,   85,   85,
      870,   85,  870,  555,  870,   85,   85,   85,   85,  557,
      870,  556,   85,  870,   85,   85,  870,   85,  870,  558,
      244,  244,   85,   85,   85,   85,   85,  870,   85,  870,
       85,  561,   85,   85,  559,   85,  560,   85,  870,   85,

       85,  870,   85,  870,   85,  870,   85,   85,  562,   85,
      870,  870,   85,   85,   85,   85,  870,  870,  870,   85,
       85,   85,   85,  563,   85,   85,   85,   85,  870,  870,
      564,   85,   85,   85,   85,   85,  566,   85,   85,   85,
       85,  567,   85,  565,   85,   85,   85,   85,   85,  568,
      569,  819,  819,  819,  819,   85,   85,   85,   85,  570,
      870,  870,   85,   85,   85,   85,   85,  870,   85,   85,
      870,   85,  870,   85,  572,   85,   85,  573,   85,  571,
       85,  870,   85,   85,   85,   85,   85,   85,  583,   85,
       85,   85,   85,   85,  584,  585,   85,   85,   85,   85,

       85,   85,  587,   85,   85,   85,   85,   85,  586,   85,
      870,  590,   85,   85,   85,  420,   85,  870,   85,   85,
       85,   85,   85,  420,  588,   85,   85,   85,   85,  870,
      870,  870,   85,   85,   85,   85,   85,  870,   85,  589,
      591,  870,  592,   85,  870,   85,   85,  870,   85,   85,
      411,   85,   85,   85,   85,   85,   85,  593,   85,   85,
       85,   85,   85,  594,  870,  420,  870,   85,  870,   85,
       85,   85,   85,   85,  870,  870,  870,   85,   85,   85,
       85,  595,   85,   85,   85,  596,   85,  609,  597,   85,
       85,   85,   85,   85,  870,   85,   85,  870,   85,   85,

       85,   85,   85,   85,  870,   85,   85,   85,   85,   85,
       85,  870,   85,   85,  870,   85,  870,   85,  870,   85,
       85,  610,   85,   85,  870,   85,   85,  613,   85,  611,
       85,  870,   85,   85,  612,   85,  870,   85,  870,   85,
      615,  614,  870,  616,   85,  870,   85,   85,   85,   85,
       85,   85,  870,   85,   85,   85,   85,   85,   85,  617,
       85,  870,  618,  870,   85,   85,   85,   85,   85,  870,
       85,   85,   85,  619,   85,   85,  870,   85,  620,   85,
      870,   85,  621,  870,  870,  870,   85,  870,   85,  870,
       85,  870,   85,  622,   85,  623,   85,   85,  870,   85,

      870,   85,  870,   85,  870,   85,   85,   85,   85,  624,
      870,  870,   85,   85,   85,   85,   85,  870,   85,   85,
      870,   85,  870,   85,  625,   85,   85,  870,   85,  626,
      626,  626,  626,  627,  870,   85,  870,  629,  870,  870,
       85,  870,   85,   86,   85,  630,   85,   85,   87,   85,
      628,   85,  870,   85,   85,   85,   85,   85,   85,  870,
       85,   85,   85,   85,   85,   85,  631,   85,   85,  632,
       85,   85,  870,   85,  870,   85,  870,   85,   85,  633,
       85,   85,   85,   85,   85,   85,  870,   85,   85,  634,
       85,  635,   85,   85,   85,   85,  870,   85,  870,   85,

       85,  636,   85,   85,   85,   85,   85,   85,  870,   85,
       85,  637,   85,  638,   85,  870,   85,   85,  645,   85,
       85,   85,   85,   85,   85,  639,   85,   85,   85,   85,
       85,   85,  870,   85,  642,  643,  870,  870,   85,   85,
       85,   85,  644,  870,  640,  641,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  870,   85,   85,   85,   85,
       85,  870,  870,  420,  420,  870,   85,   85,  653,   85,
       85,   85,  870,   85,   85,   85,   85,   85,  420,  870,
       85,  870,   85,   85,  870,   85,  654,   85,  655,   85,
       85,   85,   85,   85,   85,  870,   85,  420,   85,  870,

       85,   85,  656,   85,  870,   85,   85,   85,   85,  870,
      870,  657,   85,   85,   85,   85,  411,   85,   85,   85,
      658,  870,  659,   85,   85,   85,   85,   85,   85,   85,
       85,  870,  660,  870,   85,   85,   85,   85,   85,  870,
       85,  673,  412,  870,  674,   85,   85,   85,   85,  675,
      676,   85,   85,   85,   85,   85,   85,  870,   85,   85,
       85,   85,   85,   85,  870,   85,  870,   85,  870,   85,
       85,  870,   85,   85,  677,   85,   85,  870,   85,  870,
       85,  870,   85,   85,  870,   85,  678,   85,  870,   85,
       85,  870,   85,  870,   85,  870,   85,   85,  679,   85,

       85,  870,   85,  870,  870,  870,  680,   85,   85,   85,
       85,  682,  683,   85,  681,   85,  870,   85,   85,  684,
       85,   85,   85,   85,   85,   85,  870,   85,   85,   85,
       85,   85,   85,  685,   85,   85,   85,   85,  686,   85,
       85,  687,   85,   85,   85,   85,   85,   85,  870,   85,
      626,  626,  626,  626,   85,  688,   85,   85,  870,   85,
      689,  870,  870,  870,   85,   85,   85,   85,   85,   87,
       85,  690,   85,  870,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  691,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  870,   85,   85,   85,   85,

       85,   85,   85,   85,   85,  870,  870,  692,  870,   85,
       85,   85,   85,  870,   85,  693,   85,   85,  694,   85,
       85,   85,   85,  695,  696,  870,   85,   85,   85,   85,
       85,  870,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  420,   85,   85,   85,
       85,   85,   85,  870,   85,  420,   85,   85,   85,   85,
      411,   85,  870,   85,  870,   85,   85,  411,   85,   85,
      704,   85,   85,   85,  721,   85,   85,   85,   85,   85,
      705,   85,  411,   85,   85,  870,   85,   85,   85,   85,
       85,   85,  411,   85,   85,  870,   85,  716,  716,  870,

      716,  716,  716,  716,  717,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  717,  717,  717,  716,  716,  716,
      716,  716,  716,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  716,  716,  717,  716,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  716,  716,  716,  716,   85,  720,   85,  719,
      722,  870,   85,   85,   85,   85,  870,  870,   85,   85,
       85,   85,   85,  870,   85,   85,  723,   85,  725,   85,
      870,   85,   85,  724,   85,   85,  870,   85,   85,   85,

       85,   85,   85,  726,   85,   85,  727,   85,   85,  870,
       85,  870,   85,  870,   85,   85,  728,   85,  729,   85,
       85,   85,   85,   85,  730,   85,   85,   85,  870,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  733,  732,
      870,   85,   85,   85,   85,   85,  870,   85,   85,  870,
       85,  870,   85,  870,   85,   85,   85,   85,   85,   85,
      870,   85,  734,   85,  870,   85,   85,   85,   85,   85,
       85,  735,   85,  411,   85,  870,   85,   85,  870,   85,
       85,   85,   85,   85,   85,  736,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  861,  861,  861,  861,   85,

      870,   85,  750,  750,  751,  750,  750,  750,  750,  752,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  752,
      752,  752,  750,  750,  750,  750,  750,  750,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  750,  750,
      752,  750,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  750,  750,  750,
      750,   85,  756,   85,   85,  870,   85,   85,   85,   85,
       85,   85,  870,   85,   85,  757,   85,   85,  870,   85,
      870,   85,  870,   85,   85,  870,   85,  758,   85,   85,

       85,   85,  759,   85,  761,   85,   85,  870,   85,  870,
       85,  760,   85,   85,   85,   85,   85,  870,  762,  870,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  870,
       85,   85,   85,   85,   85,   85,  870,   85,  763,  870,
       85,  764,   85,   85,  766,   85,   85,   85,   85,   85,
       85,  782,   85,   85,  767,   85,   85,   85,  870,   85,
       85,   85,   85,   85,   85,  783,   85,   85,  870,   85,
       85,  870,   85,   85,   85,   85,  784,   85,  785,   85,
       85,   85,   85,   85,   85,  870,   85,  786,  870,  870,
      870,   85,   85,   85,   85,   85,   85,   85,   85,   85,

      870,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      788,  870,   85,   85,   85,   85,   85,   85,  870,   85,
      793,  793,  870,  793,  793,  793,  793,  794,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  794,  794,  794,
      793,  793,  793,  793,  793,  793,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  793,  793,  794,  793,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  793,  793,  793,  793,  797,
      797,  870,  797,  797,  797,  797,  798,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  798,  798,  798,  797,
      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  797,  797,  798,  797,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  797,  797,  797,  797,   85,  806,
       85,   85,   85,   85,   85,   85,  870,   85,   85,   85,
       85,   85,   85,  870,   85,  870,  807,  870,  870,   85,
      870,   85,   85,   85,   85,   85,   85,  870,   85,   85,
       85,   85,   85,   85,  870,   85,  810,   85,   85,   85,

       85,  870,  870,  870,   85,   85,   85,   85,  819,  819,
      819,  819,  861,  861,  861,  861,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  829,  833,  833,  870,  833,  833,  833,  833,
      834,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  833,  833,  833,  833,  833,  833,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  833,
      833,  834,  833,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  833,  833,
      833,  833,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   85,   85,   85,   85,   85,   85,  870,   85,
       85,  129,  870,  129,  129,  870,  129,  129,  129,  129,
      129,  193,  193,  870,  193,  193,  193,  193,  193,  193,
      193,  200,  870,  870,  200,   86,   86,  870,   86,  228,

      228,  870,  870,  228,  228,  228,  228,  228,  228,  235,
      870,  870,  235,  606,  606,  870,  870,  606,  606,  606,
      606,  606,  606,  651,  651,  651,  651,  651,  870,  870,
      651,  870,  651,  754,  754,  870,  870,  870,  754,  754,
      754,  754,  754,  716,  716,  870,  716,  716,  716,  716,
      716,  716,  716,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  800,  800,  870,  800,  800,  800,  800,
      800,  800,  800,  801,  801,  801,  870,  801,  801,  801,
      801,  801,  801,  805,  805,  870,  870,  805,  805,  805,
      870,  805,  805,  793,  793,  870,  793,  793,  793,  793,

      793,  793,  793,  797,  797,  870,  797,  797,  797,  797,
      797,  797,  797,  803,  803,  803,  870,  803,  803,  803,
      803,  803,  803,  827,  827,  870,  870,  827,  827,  827,
      827,  827,  827,  833,  833,  870,  833,  833,  833,  833,
      833,  833,  833,  840,  840,  870,  840,  840,  840,  840,
      840,  840,  840,  848,  848,  870,  870,  848,  848,  848,
      870,  848,  848,   13,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,

      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870
    } ;

static yyconst flex_int16_t yy_chk[4034] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    6,    7,    8,    5,    6,   31,   31,    3,
        4,    9,   10,   32,   32,   71,   15,    7,    8,   15,
       71,    9,   10,  402,   15,   28,   25,   25,  105,   28,

      526,   26,  526,   26,   25,    5,    6,   25,  402,   26,
        7,    8,   26,   33,   33,   35,   35,  129,  129,   42,
      105,   42,  426,  877,    9,   10,   42,  426,   42,   42,
      119,  119,  119,    9,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   20,   20,   20,   20,   34,   34,
       34,   34,   81,   24,   24,   81,   60,  787,   20,  493,
       81,  333,   34,   20,  493,  787,   24,   34,   37,   37,
       37,   37,   46,  333,   46,   46,   37,  605,  867,   46,
       37,   46,  865,  605,   37,   60,   20,   20,   20,  434,
       20,   20,  434,  495,   20,   20,  495,  648,  860,   20,
       20,   20,   20,  648,   20,   22,   22,   22,   22,   24,
      527,   39,   41,  527,   60,   39,  859,   39,   41,   39,
       41,   22,   22,   22,   39,   41,   39,   41,  857,   22,
       22,   22,   22,   22,   22,  117,   22,  856,  117,   22,

      194,  855,   22,  194,   22,   22,   22,   22,   22,   22,
      606,   22,  780,  606,  780,   29,  780,   22,   29,  670,
      854,   22,  670,   29,  670,  853,   22,  755,   22,   29,
      755,   29,   29,   29,   38,   38,   38,   38,  102,  102,
      102,  102,  781,  226,   29,  781,  226,   40,   38,  852,
      851,  117,   29,   38,   40,  850,  194,   40,   29,   40,
       40,  849,  847,   43,   40,   43,   40,   43,   43,   44,
      846,   54,   43,   54,   43,   44,  805,   44,   54,  805,
       54,   45,   44,   38,   44,   38,   45,   45,   45,  845,
       38,  805,   38,   45,   47,   45,   47,   47,   48,  226,

      843,   47,   48,   47,  842,  841,  838,   49,   48,   49,
       48,   48,   50,   49,   49,   48,   49,   48,  298,  837,
       52,  298,   50,   51,   50,   50,  836,   51,   50,   50,
       52,   50,   52,   51,   52,   51,   52,   53,   55,   52,
       51,   52,   51,   84,   84,   84,   84,   53,   55,   53,
       55,   56,  832,  831,   53,   55,   53,   55,   56,   56,
       53,   56,   84,   56,   56,  830,  829,  826,   56,   57,
       56,   57,   57,   85,  298,   85,   57,  801,   57,  801,
       85,  801,   85,   87,   87,   87,   87,   88,   89,   88,
       89,   88,   90,  824,   89,   89,   88,   89,   88,  823,

       90,  821,   90,   91,   90,   91,   91,  820,  816,   90,
       91,   90,   91,  815,   92,  743,   92,  818,  743,  814,
      818,   92,   87,   92,   87,   93,  817,   93,   93,  817,
      813,   95,   93,   94,   93,   94,   94,   95,   87,   95,
       94,  817,   94,   96,   95,  812,   95,   96,   96,   96,
       97,   96,   97,   98,   97,   98,   96,   96,   96,   97,
       98,   97,   98,   99,  811,  230,  230,  230,  809,  101,
      803,  101,  743,   99,  101,   99,  799,  101,  768,   99,
       99,  768,   99,  101,  120,  101,  230,  120,  772,  101,
      789,  772,  120,  789,  827,  101,  796,  827,  120,  101,

      120,  120,  120,  121,  121,  795,  792,  121,  121,  121,
      791,  790,  828,  120,  122,  828,  122,  122,  122,  839,
      778,  120,  839,  140,  141,  140,  776,  120,  121,  122,
      140,  141,  140,  141,  140,  768,  775,  122,  141,  142,
      141,  142,  143,  122,  143,  772,  142,  789,  142,  143,
      143,  143,  144,  145,  844,  145,  144,  844,  144,  146,
      145,  145,  145,  144,  146,  144,  146,  147,  773,  147,
      150,  146,  148,  146,  147,  150,  147,  150,  148,  149,
      148,  149,  150,  771,  150,  148,  149,  148,  149,  149,
      151,  152,  151,  848,  770,  153,  848,  151,  152,  151,

      152,  153,  154,  153,  154,  152,  769,  152,  153,  154,
      153,  154,  155,  156,  155,  156,  765,  754,  155,  155,
      156,  155,  156,  157,  158,  157,  158,  753,  750,  749,
      157,  158,  157,  158,  159,  804,  159,  804,  159,  804,
      160,  159,  160,  159,  160,  160,  160,  748,  161,  160,
      160,  160,  161,  162,  747,  746,  161,  163,  161,  163,
      162,  745,  162,  161,  163,  161,  163,  162,  164,  162,
      744,  742,  164,  740,  164,  739,  165,  738,  165,  164,
      737,  164,  165,  165,  165,  165,  166,  731,  166,  167,
      718,  167,  168,  166,  714,  166,  167,  167,  167,  712,

      168,  169,  168,  169,  711,  710,  168,  168,  169,  168,
      169,  170,  171,  170,  171,  170,  170,  172,  709,  171,
      170,  171,  170,  172,  173,  708,  707,  172,  706,  172,
      173,  172,  173,  703,  172,  175,  172,  173,  174,  173,
      702,  175,  174,  175,  174,  701,  700,  699,  175,  174,
      175,  174,  176,  177,  176,  177,  176,  698,  697,  176,
      177,  176,  177,  178,  179,  178,  179,  178,  179,  688,
      178,  672,  178,  179,  180,  179,  180,  181,  669,  181,
      180,  180,  668,  180,  181,  182,  181,  182,  667,  182,
      666,  183,  862,  183,  182,  862,  182,  183,  183,  184,

      183,  184,  665,  862,  664,  184,  184,  185,  184,  185,
      185,  186,  663,  186,  185,  662,  185,  186,  186,  661,
      186,  202,  202,  202,  202,  206,  652,  206,  207,  207,
      207,  650,  206,  649,  206,  207,  208,  207,  208,  209,
      647,  209,  208,  208,  646,  208,  209,  209,  209,  210,
      211,  210,  211,  608,  607,  604,  210,  211,  210,  211,
      202,  212,  202,  212,  603,  214,  213,  214,  212,  215,
      212,  213,  214,  213,  214,  602,  202,  215,  213,  215,
      213,  216,  601,  600,  215,  217,  215,  217,  599,  216,
      216,  216,  217,  217,  217,  218,  216,  219,  216,  218,

      222,  218,  222,  219,  598,  219,  218,  222,  218,  222,
      219,  220,  219,  220,  220,  582,  580,  220,  220,  579,
      220,  221,  221,  221,  578,  223,  577,  223,  221,  576,
      221,  223,  223,  224,  223,  224,  575,  224,  229,  229,
      229,  574,  224,  243,  224,  231,  231,  231,  427,  427,
      427,  229,  529,  243,  244,  243,  244,  528,  525,  229,
      243,  244,  243,  244,  245,  229,  231,  524,  245,  427,
      245,  246,  245,  246,  246,  523,  522,  245,  246,  245,
      246,  247,  248,  247,  248,  247,  521,  520,  250,  248,
      247,  248,  247,  249,  250,  249,  250,  249,  251,  501,

      500,  250,  249,  250,  249,  252,  251,  252,  251,  499,
      253,  498,  252,  251,  252,  251,  253,  254,  253,  863,
      255,  864,  863,  253,  864,  253,  255,  254,  255,  254,
      863,  254,  864,  255,  254,  255,  254,  256,  497,  866,
      256,  256,  866,  256,  496,  256,  256,  256,  494,  256,
      866,  259,  256,  256,  256,  257,  257,  257,  258,  436,
      258,  259,  257,  259,  257,  258,  435,  258,  259,  260,
      259,  260,  261,  433,  432,  262,  260,  264,  260,  264,
      261,  262,  261,  262,  264,  264,  264,  261,  262,  261,
      262,  262,  263,  431,  263,  263,  265,  430,  265,  263,

      266,  263,  266,  265,  267,  265,  268,  266,  429,  266,
      267,  269,  267,  269,  404,  269,  268,  267,  268,  267,
      269,  403,  269,  268,  270,  268,  270,  271,  270,  272,
      401,  270,  400,  270,  271,  272,  271,  272,  428,  428,
      428,  271,  272,  271,  272,  273,  274,  273,  274,  273,
      274,  276,  399,  274,  273,  274,  273,  275,  275,  428,
      275,  276,  281,  276,  281,  275,  277,  275,  276,  281,
      276,  281,  277,  278,  277,  278,  278,  280,  398,  277,
      278,  277,  278,  279,  280,  279,  280,  279,  397,  283,
      279,  280,  279,  280,  282,  283,  282,  283,  284,  337,

      284,  282,  283,  282,  283,  284,  284,  284,  285,  336,
      285,  335,  286,  334,  286,  285,  287,  285,  285,  286,
      332,  286,  331,  288,  287,  288,  287,  288,  328,  306,
      288,  287,  288,  287,  289,  289,  305,  289,  304,  290,
      303,  291,  289,  291,  289,  290,  291,  290,  291,  292,
      291,  292,  290,  293,  290,  295,  292,  294,  292,  294,
      293,  295,  293,  295,  294,  302,  294,  293,  295,  293,
      295,  296,  301,  296,  300,  297,  299,  297,  296,  242,
      296,  297,  297,  307,  297,  307,  241,  307,  240,  308,
      307,  308,  307,  308,  239,  310,  308,  309,  308,  309,

      309,  312,  238,  312,  309,  310,  309,  310,  312,  311,
      312,  311,  310,  311,  310,  313,  237,  236,  311,  227,
      311,  205,  313,  314,  313,  314,  314,  204,  203,  313,
      314,  313,  314,  315,  199,  315,  316,  315,  198,  316,
      196,  316,  315,  195,  315,  139,  316,  317,  316,  317,
      317,  138,  137,  317,  317,  318,  317,  318,  318,  319,
      136,  319,  318,  320,  318,  320,  319,  321,  319,  321,
      320,  135,  320,  322,  321,  322,  321,  322,  321,  324,
      322,  323,  322,  323,  323,  324,  134,  324,  323,  325,
      323,  325,  324,  325,  324,  326,  133,  326,  325,  327,

      325,  327,  326,  128,  326,  126,  327,  327,  327,  329,
      329,  329,  330,  330,  124,  111,  330,  330,  330,  338,
      100,  338,  329,   83,   75,   74,  338,   73,  338,   70,
      329,   63,  338,  339,   59,  339,  329,  330,   58,  339,
      339,  340,  339,   36,  343,  340,  343,  340,  341,  341,
      341,  343,  340,  343,  340,  341,  344,  341,  342,  342,
      342,  344,  345,  344,  345,  342,   30,  342,  344,  345,
      344,  345,  346,  346,  345,  346,  345,  347,   27,  347,
      346,  348,  346,  348,  347,  347,  347,  348,  348,  349,
      348,  349,  350,  352,   23,   21,  349,   18,  349,  351,

      352,  351,  350,  352,  350,  352,  351,   13,  351,  350,
      352,  350,  352,  353,    0,  353,    0,  354,    0,  355,
      353,  355,  353,  354,    0,  354,  355,  357,  355,    0,
      354,  356,  354,  356,  356,    0,    0,  357,  356,  357,
      356,  358,  359,  358,  357,  358,  357,    0,  358,  360,
      358,  360,  359,    0,  359,  361,  360,  361,  360,  359,
        0,  359,  361,  361,  361,  362,    0,  362,  363,  365,
      363,    0,  362,    0,  362,  363,  363,  363,  364,  365,
      364,  365,    0,    0,  364,  364,  365,  364,  365,  366,
      367,  366,  367,    0,  367,  366,  366,    0,  366,  367,

      368,  367,  368,  369,    0,  369,    0,  368,  368,  368,
      369,  369,  369,  370,    0,    0,    0,  370,  371,  370,
      371,  372,    0,  370,  370,  371,  370,  371,    0,  372,
      373,  372,  373,  373,  375,    0,  372,  373,  372,  373,
      374,  375,  374,  375,    0,  378,  376,  374,  375,  374,
      375,  376,  377,  376,  377,  378,    0,  378,  376,  377,
      376,  377,  378,  382,  378,  379,  379,  379,  380,  382,
        0,  382,  379,    0,  379,  380,  382,  380,  382,  381,
        0,  381,  380,  385,  380,  381,  381,  383,  381,  383,
      384,    0,  384,  385,  383,  385,  383,  384,  387,  384,

      385,  386,  385,  386,  387,    0,  387,  386,  386,  388,
      386,  387,  389,  387,  389,  388,  389,  388,  389,    0,
        0,  389,  388,  389,  388,  390,  391,  390,  391,  392,
        0,    0,  390,  391,  390,  391,  392,  393,  392,  393,
      394,    0,  394,  392,  393,  392,  393,  394,  395,  394,
      396,  405,  396,  405,  395,    0,  395,  396,  405,  396,
      405,  395,  406,  395,  407,    0,  407,  406,    0,    0,
      407,  407,  406,  407,  406,  406,  408,    0,  408,  406,
        0,  406,  406,  408,  409,  408,  409,  410,  411,  410,
      411,  409,    0,  409,  410,  411,  410,  411,  412,    0,

      412,  413,  414,  413,    0,  412,    0,  412,  413,  413,
      413,    0,  414,  415,  414,  415,    0,    0,  416,  414,
      415,  414,  415,  415,  416,  417,  416,  417,    0,    0,
        0,  416,  417,  416,  417,  417,  418,  420,  418,  420,
      418,  419,  421,  418,  420,  418,  420,  419,  422,  419,
      422,  421,    0,  421,  419,  422,  419,  422,  421,  423,
      421,  425,  424,  423,  424,  423,  424,  425,    0,  425,
      423,  424,  423,  424,  425,  437,  425,  437,  438,    0,
      438,  439,  437,  439,  437,  438,  438,  438,  439,  440,
      439,  441,  443,  443,    0,  440,    0,  440,  442,    0,

      442,  441,  440,  441,  440,  442,    0,  442,  441,  444,
      441,  444,  445,    0,  445,  447,  444,  447,  444,  445,
      446,  445,  447,    0,  447,  443,  446,  443,  446,  448,
        0,  448,  443,  446,  443,  446,  448,  449,  448,  449,
        0,  450,    0,  450,  449,    0,  449,  450,  450,  451,
      450,  451,    0,  452,    0,  453,  451,  453,  451,  452,
        0,  452,  453,  454,  453,  454,  452,  455,  452,  455,
      454,  456,  454,  457,  455,  455,  455,    0,  456,    0,
      456,  457,  459,  457,  459,  456,  458,  456,  457,  459,
      457,  459,  458,  460,  458,  460,  461,  463,  461,  458,

      460,  458,  460,  461,  462,  461,  462,  463,  462,  463,
        0,    0,    0,  462,  463,  462,  463,  464,    0,  464,
      465,  466,  465,  464,  464,    0,  464,  465,  465,  465,
      467,  466,  467,  466,  468,    0,  468,  467,  466,  467,
      466,  468,  469,  468,  470,  472,    0,  472,  469,  470,
      469,  470,  472,    0,  472,  469,  470,  469,  470,  471,
        0,  471,    0,  471,    0,  473,  471,  473,  471,  474,
        0,  473,  473,    0,  473,  474,    0,  474,    0,  475,
      476,  476,  474,  475,  474,  475,  477,    0,  477,    0,
      475,  479,  475,  477,  477,  477,  478,  479,    0,  479,

      478,    0,  478,    0,  479,    0,  479,  478,  480,  478,
        0,    0,  480,  476,  480,  476,    0,    0,    0,  480,
      476,  480,  476,  481,  482,  481,  482,  481,    0,    0,
      482,  482,  481,  482,  481,  483,  484,  483,  484,  485,
      484,  485,  483,  483,  483,  484,  485,  484,  485,  486,
      487,  808,  808,  808,  808,  487,  486,  487,  486,  488,
        0,    0,  487,  486,  487,  486,  489,    0,  489,  488,
        0,  488,    0,  489,  490,  489,  488,  491,  488,  489,
      490,    0,  490,  491,  492,  491,  492,  490,  502,  490,
      491,  492,  491,  492,  503,  504,  503,  504,  502,  504,

      502,  503,  506,  503,  504,  502,  504,  502,  505,  510,
        0,  510,  506,  505,  506,  505,  510,    0,  510,  506,
      505,  506,  505,  507,  508,  508,  507,  508,  507,    0,
        0,    0,  508,  507,  508,  507,  509,    0,  509,  509,
      511,    0,  513,  509,    0,  509,  511,    0,  511,  512,
      512,  512,  513,  511,  513,  511,  512,  514,  512,  513,
      514,  513,  514,  515,    0,  516,    0,  514,    0,  514,
      515,  516,  515,  516,    0,    0,    0,  515,  516,  515,
      516,  517,  517,  518,  517,  518,  519,  530,  519,  517,
      518,  517,  518,  519,    0,  519,  531,    0,  531,  530,

      532,  530,  532,  531,    0,  531,  530,  532,  530,  532,
      533,    0,  533,  534,    0,  534,    0,  533,    0,  533,
      534,  534,  534,  535,    0,  535,  536,  537,  536,  535,
      535,    0,  535,  536,  536,  536,    0,  537,    0,  537,
      539,  538,    0,  540,  537,    0,  537,  538,  539,  538,
      539,  540,    0,  540,  538,  539,  538,  539,  540,  541,
      540,    0,  542,    0,  543,  541,  543,  541,  542,    0,
      542,  543,  541,  543,  541,  542,    0,  542,  544,  544,
        0,  544,  545,    0,    0,    0,  544,    0,  544,    0,
      545,    0,  545,  546,  546,  547,  546,  545,    0,  545,

        0,  546,    0,  546,    0,  547,  548,  547,  548,  548,
        0,    0,  547,  548,  547,  548,  549,    0,  549,  550,
        0,  550,    0,  549,  549,  549,  550,    0,  550,  551,
      551,  551,  551,  552,    0,  552,    0,  554,    0,    0,
      552,    0,  552,  551,  553,  555,  553,  554,  551,  554,
      553,  553,    0,  553,  554,  555,  554,  555,  556,    0,
      556,  557,  555,  557,  555,  556,  556,  556,  557,  558,
      557,  559,    0,  559,    0,  558,    0,  558,  559,  560,
      559,  561,  558,  561,  558,  560,    0,  560,  561,  561,
      561,  562,  560,  563,  560,  563,    0,  562,    0,  562,

      563,  563,  563,  564,  562,  564,  562,  565,    0,  565,
      564,  564,  564,  566,  565,    0,  565,  567,  573,  567,
      568,  566,  568,  566,  567,  567,  567,  568,  566,  568,
      566,  569,    0,  569,  571,  571,    0,    0,  569,  570,
      569,  570,  572,    0,  569,  570,  570,  572,  570,  572,
      583,  573,  583,  573,  572,    0,  572,  583,  573,  583,
      573,    0,    0,  583,  584,    0,  584,  571,  585,  571,
      585,  584,    0,  584,  571,  585,  571,  585,  586,    0,
      587,    0,  587,  586,    0,  586,  587,  587,  588,  587,
      586,  589,  586,  589,  588,    0,  588,  589,  589,    0,

      589,  588,  590,  588,    0,  591,  590,  591,  590,    0,
        0,  591,  591,  590,  591,  590,  592,  593,  592,  593,
      593,    0,  595,  592,  593,  592,  593,  594,  595,  594,
      595,    0,  596,    0,  594,  595,  594,  595,  596,    0,
      596,  609,  597,    0,  609,  596,  597,  596,  597,  609,
      610,  609,  610,  597,  610,  597,  609,    0,  609,  610,
      611,  610,  611,  612,    0,  612,    0,  611,    0,  611,
      612,    0,  612,  613,  613,  613,  614,    0,  614,    0,
      613,    0,  613,  614,    0,  614,  615,  615,    0,  615,
      616,    0,  616,    0,  615,    0,  615,  616,  616,  616,

      617,    0,  617,    0,    0,    0,  617,  617,  618,  617,
      618,  619,  620,  619,  618,  618,    0,  618,  619,  621,
      619,  621,  620,  621,  620,  622,    0,  622,  621,  620,
      621,  620,  622,  623,  622,  623,  624,  627,  624,  627,
      623,  625,  623,  624,  627,  624,  627,  625,    0,  625,
      626,  626,  626,  626,  625,  626,  625,  628,    0,  628,
      629,    0,    0,    0,  628,  630,  628,  630,  629,  626,
      629,  630,  630,    0,  630,  629,  631,  629,  631,  632,
      633,  632,  633,  631,  634,  631,  632,  633,  632,  633,
      634,  635,  634,  635,  636,    0,  636,  634,  635,  634,

      635,  636,  637,  636,  637,    0,    0,  636,    0,  637,
      638,  637,  638,    0,  639,  637,  639,  638,  638,  638,
      640,  639,  640,  639,  641,    0,  642,  640,  642,  640,
      643,    0,  643,  642,  641,  642,  641,  643,  644,  643,
      644,  641,  645,  641,  645,  644,  653,  644,  654,  645,
      654,  645,  653,    0,  653,  654,  655,  654,  655,  653,
      656,  653,    0,  655,    0,  655,  656,  655,  656,  657,
      658,  657,  658,  656,  675,  656,  657,  658,  657,  658,
      660,  659,  657,  659,  675,    0,  675,  660,  659,  660,
      659,  675,  659,  675,  660,    0,  660,  671,  671,    0,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  673,  674,  673,  673,
      676,    0,  674,  673,  674,  673,    0,    0,  676,  674,
      676,  674,  677,    0,  677,  676,  678,  676,  680,  677,
        0,  677,  678,  679,  678,  679,    0,  679,  680,  678,

      680,  678,  679,  681,  679,  680,  682,  680,  681,    0,
      681,    0,  682,    0,  682,  681,  683,  681,  684,  682,
      683,  682,  683,  684,  685,  684,  685,  683,    0,  683,
      684,  685,  684,  685,  686,  687,  686,  687,  690,  689,
        0,  686,  687,  686,  687,  689,    0,  689,  690,    0,
      690,    0,  689,    0,  689,  690,  691,  690,  691,  692,
        0,  692,  691,  691,    0,  691,  692,  693,  692,  693,
      694,  695,  694,  704,  693,    0,  693,  694,    0,  694,
      704,  695,  704,  695,  696,  696,  696,  704,  695,  704,
      695,  696,  705,  696,  705,  858,  858,  858,  858,  705,

        0,  705,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  719,  719,  719,  720,    0,  720,  721,  719,  721,
      719,  720,    0,  720,  721,  721,  721,  722,    0,  722,
        0,  723,    0,  723,  722,    0,  722,  723,  723,  724,

      723,  724,  724,  725,  726,  725,  724,    0,  724,    0,
      725,  725,  725,  727,  726,  727,  726,    0,  728,    0,
      727,  726,  727,  726,  728,  729,  728,  729,  730,    0,
      730,  728,  729,  728,  729,  730,    0,  730,  729,    0,
      732,  730,  732,  733,  733,  733,  734,  732,  734,  732,
      733,  756,  733,  734,  735,  734,  735,  736,    0,  736,
      756,  735,  756,  735,  736,  757,  736,  756,    0,  756,
      758,    0,  758,  757,  759,  757,  759,  758,  760,  758,
      757,  759,  757,  759,  760,    0,  760,  761,    0,    0,
        0,  760,  762,  760,  762,  761,  763,  761,  763,  762,

        0,  762,  761,  763,  761,  763,  764,  766,  764,  766,
      767,    0,  767,  764,  766,  764,  766,  767,    0,  767,
      774,  774,    0,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  777,
      777,    0,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  782,  783,
      782,  784,  783,  784,  783,  782,    0,  782,  784,  783,
      784,  783,  785,    0,  785,    0,  786,    0,    0,  785,
        0,  785,  786,  788,  786,  788,  806,    0,  806,  786,
      788,  786,  788,  806,    0,  806,  788,  807,  810,  807,

      810,    0,    0,    0,  807,  810,  807,  810,  819,  819,
      819,  819,  861,  861,  861,  861,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  819,  825,  825,    0,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  875,  875,  875,  875,  875,  875,    0,  875,
      875,  876,    0,  876,  876,    0,  876,  876,  876,  876,
      876,  878,  878,    0,  878,  878,  878,  878,  878,  878,
      878,  879,    0,    0,  879,  880,  880,    0,  880,  881,

      881,    0,    0,  881,  881,  881,  881,  881,  881,  882,
        0,    0,  882,  883,  883,    0,    0,  883,  883,  883,
      883,  883,  883,  884,  884,  884,  884,  884,    0,    0,
      884,    0,  884,  885,  885,    0,    0,    0,  885,  885,
      885,  885,  885,  886,  886,    0,  886,  886,  886,  886,
      886,  886,  886,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  888,  888,    0,  888,  888,  888,  888,
      888,  888,  888,  889,  889,  889,    0,  889,  889,  889,
      889,  889,  889,  890,  890,    0,    0,  890,  890,  890,
        0,  890,  890,  891,  891,    0,  891,  891,  891,  891,

      891,  891,  891,  892,  892,    0,  892,  892,  892,  892,
      892,  892,  892,  893,  893,  893,    0,  893,  893,  893,
      893,  893,  893,  894,  894,    0,    0,  894,  894,  894,
      894,  894,  894,  895,  895,    0,  895,  895,  895,  895,
      895,  895,  895,  896,  896,    0,  896,  896,  896,  896,
      896,  896,  896,  897,  897,    0,    0,  897,  897,  897,
        0,  897,  897,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,

      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[156] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,     };

extern int frontend_verilog_yy_flex_debug;
int frontend_verilog_yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up frontend_verilog_yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *frontend_verilog_yytext;
#line 1 "frontends/verilog/verilog_lexer.l"
/*
 *  yosys -- Yosys Open SYnthesis Suite
 *
 *  Copyright (C) 2012  Clifford Wolf <clifford@clifford.at>
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *  ---
 *
 *  The Verilog frontend.
 *
 *  This frontend is using the AST frontend library (see frontends/ast/).
 *  Thus this frontend does not generate RTLIL code directly but creates an
 *  AST directly from the Verilog parse tree and then passes this AST to
 *  the AST frontend library.
 *
 *  ---
 *
 *  A simple lexer for Verilog code. Non-preprocessor compiler directives are
 *  handled here. The preprocessor stuff is handled in preproc.cc. Everything
 *  else is left to the bison parser (see verilog_parser.y).
 *
 */
#line 36 "frontends/verilog/verilog_lexer.l"

#ifdef __clang__
// bison generates code using the 'register' storage class specifier
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#include "include/log.h"
#include "include/verilog_frontend.h"
#include "include/ast.h"
#include "include/verilog_parser.tab.hh"

USING_YOSYS_NAMESPACE
using namespace AST;
using namespace VERILOG_FRONTEND;

YOSYS_NAMESPACE_BEGIN
namespace VERILOG_FRONTEND {
	std::vector<std::string> fn_stack;
	std::vector<int> ln_stack;
}
YOSYS_NAMESPACE_END

#define YYSTYPE FRONTEND_VERILOG_YYSTYPE
#define YYLTYPE FRONTEND_VERILOG_YYLTYPE

#define SV_KEYWORD(_tok) \
	if (sv_mode) return _tok; \
	log("Lexer warning: The SystemVerilog keyword `%s' (at %s:%d) is not "\
			"recognized unless read_verilog is called with -sv!\n", frontend_verilog_yytext, \
			AST::current_filename.c_str(), frontend_verilog_yyget_lineno()); \
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define NON_KEYWORD() \
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define YY_INPUT(buf,result,max_size) \
	result = readsome(*VERILOG_FRONTEND::lexin, buf, max_size)

YYLTYPE real_location;
YYLTYPE old_location;

#define YY_USER_ACTION \
       old_location = real_location; \
       real_location.first_line = real_location.last_line; \
       real_location.first_column = real_location.last_column; \
       for(int i = 0; frontend_verilog_yytext[i] != '\0'; ++i){ \
               if(frontend_verilog_yytext[i] == '\n') { \
                       real_location.last_line++; \
                       real_location.last_column = 1; \
               } \
               else { \
                       real_location.last_column++; \
               } \
       } \
    (*yylloc) = real_location;

#define YY_BREAK \
    (*yylloc) = old_location; \
    break;

#undef YY_BUF_SIZE
#define YY_BUF_SIZE 65536

extern int frontend_verilog_yylex(YYSTYPE *yylval_param, YYLTYPE *yyloc_param);





#line 2020 "frontends/verilog/verilog_lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define SYNOPSYS_TRANSLATE_OFF 3
#define SYNOPSYS_FLAGS 4
#define IMPORT_DPI 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int frontend_verilog_yylex_destroy (void );

int frontend_verilog_yyget_debug (void );

void frontend_verilog_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE frontend_verilog_yyget_extra (void );

void frontend_verilog_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *frontend_verilog_yyget_in (void );

void frontend_verilog_yyset_in  (FILE * in_str  );

FILE *frontend_verilog_yyget_out (void );

void frontend_verilog_yyset_out  (FILE * out_str  );

int frontend_verilog_yyget_leng (void );

char *frontend_verilog_yyget_text (void );

int frontend_verilog_yyget_lineno (void );

void frontend_verilog_yyset_lineno (int line_number  );

YYSTYPE * frontend_verilog_yyget_lval (void );

void frontend_verilog_yyset_lval (YYSTYPE * yylval_param  );

       YYLTYPE *frontend_verilog_yyget_lloc (void );
    
        void frontend_verilog_yyset_lloc (YYLTYPE * yylloc_param  );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int frontend_verilog_yywrap (void );
#else
extern int frontend_verilog_yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( frontend_verilog_yytext, frontend_verilog_yyleng, 1, frontend_verilog_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( frontend_verilog_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( frontend_verilog_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, frontend_verilog_yyin))==0 && ferror(frontend_verilog_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(frontend_verilog_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int frontend_verilog_yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param );

#define YY_DECL int frontend_verilog_yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param )
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after frontend_verilog_yytext and frontend_verilog_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
        YYSTYPE * yylval;
    
        YYLTYPE * yylloc;
    
#line 117 "frontends/verilog/verilog_lexer.l"


#line 2227 "frontends/verilog/verilog_lexer.cc"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)frontend_verilog_yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! frontend_verilog_yyin )
			frontend_verilog_yyin = stdin;

		if ( ! frontend_verilog_yyout )
			frontend_verilog_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			frontend_verilog_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
		}

		frontend_verilog_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of frontend_verilog_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 871 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3964 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < frontend_verilog_yyleng; ++yyl )
				if ( frontend_verilog_yytext[yyl] == '\n' )
					   
    frontend_verilog_yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 119 "frontends/verilog/verilog_lexer.l"
{
	fn_stack.push_back(current_filename);
	ln_stack.push_back(frontend_verilog_yyget_lineno());
	current_filename = frontend_verilog_yytext+11;
	if (!current_filename.empty() && current_filename.front() == '"')
		current_filename = current_filename.substr(1);
	if (!current_filename.empty() && current_filename.back() == '"')
		current_filename = current_filename.substr(0, current_filename.size()-1);
	frontend_verilog_yyset_lineno(0);
	yylloc->first_line = yylloc->last_line = 0;
	real_location.first_line = real_location.last_line = 0;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 132 "frontends/verilog/verilog_lexer.l"
{
	current_filename = fn_stack.back();
	fn_stack.pop_back();
	frontend_verilog_yyset_lineno(ln_stack.back());
	yylloc->first_line = yylloc->last_line = ln_stack.back();
	real_location.first_line = real_location.last_line = ln_stack.back();
	ln_stack.pop_back();
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 141 "frontends/verilog/verilog_lexer.l"
{
	char *p = frontend_verilog_yytext + 5;
	while (*p == ' ' || *p == '\t') p++;
	frontend_verilog_yyset_lineno(atoi(p));
	yylloc->first_line = yylloc->last_line = atoi(p);
	real_location.first_line = real_location.last_line = atoi(p);
	while (*p && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	char *q = *p ? p + 1 : p;
	while (*q && *q != '"') q++;
	current_filename = std::string(p).substr(1, q-p-1);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "frontends/verilog/verilog_lexer.l"
{
	log_error("Can't open include file `%s'!\n", frontend_verilog_yytext + 15);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 158 "frontends/verilog/verilog_lexer.l"
/* ignore timescale directive */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 160 "frontends/verilog/verilog_lexer.l"
/* ignore `celldefine */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 161 "frontends/verilog/verilog_lexer.l"
/* ignore `endcelldefine */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 163 "frontends/verilog/verilog_lexer.l"
{
	char *p = frontend_verilog_yytext;
	while (*p != 0 && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	if (!strcmp(p, "none"))
		VERILOG_FRONTEND::default_nettype_wire = false;
	else if (!strcmp(p, "wire"))
		VERILOG_FRONTEND::default_nettype_wire = true;
	else
		frontend_verilog_yyerror("Unsupported default nettype: %s", p);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 175 "frontends/verilog/verilog_lexer.l"
/* ignore `protect*/
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 176 "frontends/verilog/verilog_lexer.l"
/* ignore `endprotect*/
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 178 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yyerror("Unimplemented compiler directive or undefined macro %s.", frontend_verilog_yytext);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 182 "frontends/verilog/verilog_lexer.l"
{ return TOK_MODULE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 183 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDMODULE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 184 "frontends/verilog/verilog_lexer.l"
{ return TOK_FUNCTION; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 185 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDFUNCTION; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 186 "frontends/verilog/verilog_lexer.l"
{ return TOK_TASK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 187 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDTASK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 188 "frontends/verilog/verilog_lexer.l"
{ return specify_mode ? TOK_SPECIFY : TOK_IGNORED_SPECIFY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 189 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDSPECIFY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 190 "frontends/verilog/verilog_lexer.l"
{ return TOK_SPECPARAM; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 191 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_PACKAGE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 192 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ENDPACKAGE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 193 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_INTERFACE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 194 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ENDINTERFACE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 195 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_MODPORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 196 "frontends/verilog/verilog_lexer.l"
{ return TOK_PARAMETER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 197 "frontends/verilog/verilog_lexer.l"
{ return TOK_LOCALPARAM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 198 "frontends/verilog/verilog_lexer.l"
{ return TOK_DEFPARAM; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 199 "frontends/verilog/verilog_lexer.l"
{ return TOK_ASSIGN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 200 "frontends/verilog/verilog_lexer.l"
{ return TOK_ALWAYS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 201 "frontends/verilog/verilog_lexer.l"
{ return TOK_INITIAL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 202 "frontends/verilog/verilog_lexer.l"
{ return TOK_BEGIN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 203 "frontends/verilog/verilog_lexer.l"
{ return TOK_END; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 204 "frontends/verilog/verilog_lexer.l"
{ return TOK_IF; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 205 "frontends/verilog/verilog_lexer.l"
{ return TOK_ELSE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 206 "frontends/verilog/verilog_lexer.l"
{ return TOK_FOR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 207 "frontends/verilog/verilog_lexer.l"
{ return TOK_POSEDGE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 208 "frontends/verilog/verilog_lexer.l"
{ return TOK_NEGEDGE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 209 "frontends/verilog/verilog_lexer.l"
{ return TOK_OR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 210 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 211 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASEX; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 212 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASEZ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 213 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDCASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 214 "frontends/verilog/verilog_lexer.l"
{ return TOK_DEFAULT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 215 "frontends/verilog/verilog_lexer.l"
{ return TOK_GENERATE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 216 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDGENERATE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 217 "frontends/verilog/verilog_lexer.l"
{ return TOK_WHILE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 218 "frontends/verilog/verilog_lexer.l"
{ return TOK_REPEAT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 219 "frontends/verilog/verilog_lexer.l"
{ return TOK_AUTOMATIC; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 221 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_UNIQUE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 222 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_UNIQUE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 223 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_PRIORITY); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 225 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS_COMB); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 226 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS_FF); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 227 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS_LATCH); }
	YY_BREAK
/* use special token for labels on assert, assume, cover, and restrict because it's insanley complex
    to fix parsing of cells otherwise. (the current cell parser forces a reduce very early to update some
    global state.. its a mess) */
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 232 "frontends/verilog/verilog_lexer.l"
{
	if (!strcmp(frontend_verilog_yytext, "default"))
		return TOK_DEFAULT;
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_SVA_LABEL;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 239 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_ASSERT; SV_KEYWORD(TOK_ASSERT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 240 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_ASSUME; SV_KEYWORD(TOK_ASSUME); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 241 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_COVER; SV_KEYWORD(TOK_COVER); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 242 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_RESTRICT; SV_KEYWORD(TOK_RESTRICT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 243 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_PROPERTY; SV_KEYWORD(TOK_PROPERTY); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 244 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_RAND; SV_KEYWORD(TOK_RAND); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 245 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_CONST; SV_KEYWORD(TOK_CONST); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 246 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_CHECKER; SV_KEYWORD(TOK_CHECKER); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 247 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_ENDCHECKER; SV_KEYWORD(TOK_ENDCHECKER); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_FINAL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_LOGIC); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 250 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_VAR); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 251 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_REG); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 253 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_EVENTUALLY; SV_KEYWORD(TOK_EVENTUALLY); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 254 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_EVENTUALLY; SV_KEYWORD(TOK_EVENTUALLY); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 256 "frontends/verilog/verilog_lexer.l"
{ return TOK_INPUT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 257 "frontends/verilog/verilog_lexer.l"
{ return TOK_OUTPUT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 258 "frontends/verilog/verilog_lexer.l"
{ return TOK_INOUT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 259 "frontends/verilog/verilog_lexer.l"
{ return TOK_WIRE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 260 "frontends/verilog/verilog_lexer.l"
{ return TOK_WOR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 261 "frontends/verilog/verilog_lexer.l"
{ return TOK_WAND; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 262 "frontends/verilog/verilog_lexer.l"
{ return TOK_REG; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 263 "frontends/verilog/verilog_lexer.l"
{ return TOK_INTEGER; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 264 "frontends/verilog/verilog_lexer.l"
{ return TOK_SIGNED; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 265 "frontends/verilog/verilog_lexer.l"
{ return TOK_GENVAR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 266 "frontends/verilog/verilog_lexer.l"
{ return TOK_REAL; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 268 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ENUM); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 269 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_TYPEDEF); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 271 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_CONSTVAL;
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 276 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_CONSTVAL;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 281 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 286 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 291 "frontends/verilog/verilog_lexer.l"
{ BEGIN(STRING); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 292 "frontends/verilog/verilog_lexer.l"
{ yymore(); real_location = old_location; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 293 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(0);
	char *yystr = strdup(frontend_verilog_yytext);
	yystr[strlen(frontend_verilog_yytext) - 1] = 0;
	int i = 0, j = 0;
	while (yystr[i]) {
		if (yystr[i] == '\\' && yystr[i + 1]) {
			i++;
			if (yystr[i] == 'a')
				yystr[i] = '\a';
			else if (yystr[i] == 'f')
				yystr[i] = '\f';
			else if (yystr[i] == 'n')
				yystr[i] = '\n';
			else if (yystr[i] == 'r')
				yystr[i] = '\r';
			else if (yystr[i] == 't')
				yystr[i] = '\t';
			else if (yystr[i] == 'v')
				yystr[i] = '\v';
			else if ('0' <= yystr[i] && yystr[i] <= '7') {
				yystr[i] = yystr[i] - '0';
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
			}
		}
		yystr[j++] = yystr[i++];
	}
	yystr[j] = 0;
	yylval->string = new std::string(yystr, j);
	free(yystr);
	return TOK_STRING;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 332 "frontends/verilog/verilog_lexer.l"
{ yymore(); real_location = old_location; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 334 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_PRIMITIVE;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 339 "frontends/verilog/verilog_lexer.l"
{ return TOK_SUPPLY0; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 340 "frontends/verilog/verilog_lexer.l"
{ return TOK_SUPPLY1; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 342 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 347 "frontends/verilog/verilog_lexer.l"
{
	if (!specify_mode) REJECT;
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 353 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_MSG_TASKS;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 358 "frontends/verilog/verilog_lexer.l"
{ return TOK_TO_SIGNED; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 359 "frontends/verilog/verilog_lexer.l"
{ return TOK_TO_UNSIGNED; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 361 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 366 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 371 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) translate_off' comments.\n"
				"Yosys does support them but it is recommended to use `ifdef constructs instead!\n");
		printed_warning = true;
	}
	BEGIN(SYNOPSYS_TRANSLATE_OFF);
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 380 "frontends/verilog/verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 381 "frontends/verilog/verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 382 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 384 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(SYNOPSYS_FLAGS);
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 387 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) full_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_FULL_CASE;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 396 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) parallel_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_PARALLEL_CASE;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 405 "frontends/verilog/verilog_lexer.l"
/* ignore everything else */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 406 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 408 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(IMPORT_DPI);
	return TOK_DPI_FUNCTION;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 413 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 418 "frontends/verilog/verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 420 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(0);
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 425 "frontends/verilog/verilog_lexer.l"
{
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 429 "frontends/verilog/verilog_lexer.l"
{
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 434 "frontends/verilog/verilog_lexer.l"
{ return ATTR_BEGIN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 435 "frontends/verilog/verilog_lexer.l"
{ return ATTR_END; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 437 "frontends/verilog/verilog_lexer.l"
{ return DEFATTR_BEGIN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 438 "frontends/verilog/verilog_lexer.l"
{ return DEFATTR_END; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 440 "frontends/verilog/verilog_lexer.l"
{ return OP_POW; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 441 "frontends/verilog/verilog_lexer.l"
{ return OP_LOR; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 442 "frontends/verilog/verilog_lexer.l"
{ return OP_LAND; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 443 "frontends/verilog/verilog_lexer.l"
{ return OP_EQ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 444 "frontends/verilog/verilog_lexer.l"
{ return OP_NE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 445 "frontends/verilog/verilog_lexer.l"
{ return OP_LE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 446 "frontends/verilog/verilog_lexer.l"
{ return OP_GE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 448 "frontends/verilog/verilog_lexer.l"
{ return OP_EQX; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 449 "frontends/verilog/verilog_lexer.l"
{ return OP_NEX; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 451 "frontends/verilog/verilog_lexer.l"
{ return OP_NAND; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 452 "frontends/verilog/verilog_lexer.l"
{ return OP_NOR;  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 453 "frontends/verilog/verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 454 "frontends/verilog/verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 456 "frontends/verilog/verilog_lexer.l"
{ return OP_SHL; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 457 "frontends/verilog/verilog_lexer.l"
{ return OP_SHR; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 458 "frontends/verilog/verilog_lexer.l"
{ return OP_SSHL; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 459 "frontends/verilog/verilog_lexer.l"
{ return OP_SSHR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 461 "frontends/verilog/verilog_lexer.l"
{ return TOK_PACKAGESEP; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 462 "frontends/verilog/verilog_lexer.l"
{ return TOK_INCREMENT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 463 "frontends/verilog/verilog_lexer.l"
{ return TOK_DECREMENT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 465 "frontends/verilog/verilog_lexer.l"
{ return TOK_POS_INDEXED; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 466 "frontends/verilog/verilog_lexer.l"
{ return TOK_NEG_INDEXED; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 468 "frontends/verilog/verilog_lexer.l"
{ return TOK_WILDCARD_CONNECT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 470 "frontends/verilog/verilog_lexer.l"
{
	if (!specify_mode) REJECT;
	yylval->string = new std::string(frontend_verilog_yytext);
	return TOK_SPECIFY_OPER;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 476 "frontends/verilog/verilog_lexer.l"
{
	if (!specify_mode) return TOK_IGNORED_SPECIFY_AND;
	return TOK_SPECIFY_AND;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 481 "frontends/verilog/verilog_lexer.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 482 "frontends/verilog/verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 483 "frontends/verilog/verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 484 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 486 "frontends/verilog/verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 487 "frontends/verilog/verilog_lexer.l"
/* ignore continuation sequence */
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 488 "frontends/verilog/verilog_lexer.l"
/* ignore one-line comments */
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 490 "frontends/verilog/verilog_lexer.l"
{ return *frontend_verilog_yytext; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 492 "frontends/verilog/verilog_lexer.l"
ECHO;
	YY_BREAK
#line 3314 "frontends/verilog/verilog_lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(STRING):
			case YY_STATE_EOF(SYNOPSYS_TRANSLATE_OFF):
			case YY_STATE_EOF(SYNOPSYS_FLAGS):
			case YY_STATE_EOF(IMPORT_DPI):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed frontend_verilog_yyin at a new source and called
			 * frontend_verilog_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = frontend_verilog_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( frontend_verilog_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * frontend_verilog_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of frontend_verilog_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			frontend_verilog_yyrestart(frontend_verilog_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) frontend_verilog_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 871 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 871 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 870);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					frontend_verilog_yyrestart(frontend_verilog_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( frontend_verilog_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve frontend_verilog_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    frontend_verilog_yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void frontend_verilog_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        frontend_verilog_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
	}

	frontend_verilog_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	frontend_verilog_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void frontend_verilog_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		frontend_verilog_yypop_buffer_state();
	 *		frontend_verilog_yypush_buffer_state(new_buffer);
     */
	frontend_verilog_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	frontend_verilog_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (frontend_verilog_yywrap()) processing, but the only time this flag
	 * is looked at is after frontend_verilog_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void frontend_verilog_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	frontend_verilog_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE frontend_verilog_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) frontend_verilog_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	frontend_verilog_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with frontend_verilog_yy_create_buffer()
 * 
 */
    void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		frontend_verilog_yyfree((void *) b->yy_ch_buf  );

	frontend_verilog_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a frontend_verilog_yyrestart() or at EOF.
 */
    static void frontend_verilog_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	frontend_verilog_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then frontend_verilog_yy_init_buffer was _probably_
     * called from frontend_verilog_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		frontend_verilog_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	frontend_verilog_yyensure_buffer_stack();

	/* This block is copied from frontend_verilog_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from frontend_verilog_yy_switch_to_buffer. */
	frontend_verilog_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void frontend_verilog_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		frontend_verilog_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void frontend_verilog_yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	frontend_verilog_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       frontend_verilog_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char * yystr )
{
    
	return frontend_verilog_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) frontend_verilog_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = frontend_verilog_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in frontend_verilog_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		frontend_verilog_yytext[frontend_verilog_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = frontend_verilog_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		frontend_verilog_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int frontend_verilog_yyget_lineno  (void)
{
        
    return frontend_verilog_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *frontend_verilog_yyget_in  (void)
{
        return frontend_verilog_yyin;
}

/** Get the output stream.
 * 
 */
FILE *frontend_verilog_yyget_out  (void)
{
        return frontend_verilog_yyout;
}

/** Get the length of the current token.
 * 
 */
int frontend_verilog_yyget_leng  (void)
{
        return frontend_verilog_yyleng;
}

/** Get the current token.
 * 
 */

char *frontend_verilog_yyget_text  (void)
{
        return frontend_verilog_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void frontend_verilog_yyset_lineno (int  line_number )
{
    
    frontend_verilog_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see frontend_verilog_yy_switch_to_buffer
 */
void frontend_verilog_yyset_in (FILE *  in_str )
{
        frontend_verilog_yyin = in_str ;
}

void frontend_verilog_yyset_out (FILE *  out_str )
{
        frontend_verilog_yyout = out_str ;
}

int frontend_verilog_yyget_debug  (void)
{
        return frontend_verilog_yy_flex_debug;
}

void frontend_verilog_yyset_debug (int  bdebug )
{
        frontend_verilog_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from frontend_verilog_yylex_destroy(), so don't allocate here.
     */

    /* We do not touch frontend_verilog_yylineno unless the option is enabled. */
    frontend_verilog_yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    frontend_verilog_yyin = stdin;
    frontend_verilog_yyout = stdout;
#else
    frontend_verilog_yyin = (FILE *) 0;
    frontend_verilog_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * frontend_verilog_yylex_init()
     */
    return 0;
}

/* frontend_verilog_yylex_destroy is for both reentrant and non-reentrant scanners. */
int frontend_verilog_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		frontend_verilog_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	frontend_verilog_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    frontend_verilog_yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * frontend_verilog_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *frontend_verilog_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *frontend_verilog_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void frontend_verilog_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see frontend_verilog_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 492 "frontends/verilog/verilog_lexer.l"



// this is a hack to avoid the 'yyinput defined but not used' error msgs
void *frontend_verilog_avoid_input_warnings() {
	return (void*)&yyinput;
}


